# -*- coding: utf-8 -*-
"""Progetto Python - Software Gestionale.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eDuJSIRq3koxgdY4ittqHdSZEC80RmcW
"""

import json
import os

FILE_PATH = "products.json"

def load_products():
    """
    Function to load products from a JSON file, if it exists.
    """
    if os.path.exists(FILE_PATH):
        with open(FILE_PATH, "r") as file:  # If file exists, it will be opened in read mode
            return json.load(file)  # Loads data from JSON file and returns a dictionary with loaded products
    return {}  # If file does not exist, it returns an empty dictionary

def save_products(products):
    """
    Function to save products to a JSON file.
    """
    with open(FILE_PATH, "w") as file:
        json.dump(products, file)  # Writes products' content to the file
        # each time the function is called, it overwrites the file content with updated data

def add_product(products):
    """
    Function to add products.
    """
    # the user is asked to enter the product name
    name = input("Nome del prodotto: ").strip()  # Any additional blank spaces are removed
    # The user is asked to enter the quantity
    while True:
        try:
            quantity = int(input("Quantità: "))
            if quantity < 0:
                print("Quantità inserita non valida. Inserisci un numero positivo.")
            else:
                break
        except ValueError:
            print("Valore inserito non valido!")
        except Exception as e:
            print(e)

    # If the product already exists, it just updates the quantity and stops
    if name in products:
        products[name]["quantity"] += quantity
        print(f"Aggiornato: {quantity} X {name}")
        return

    # If the product does not exist, it asks for buying and selling price as well
    while True:
        try:
            buying_price = float(input("Prezzo di acquisto: "))
            if buying_price < 0:
                print("Prezzo di acquisto inserito non valido. Inserisci un numero positivo.")
            else:
                break
        except ValueError:
            print("Valore inserito non valido!")
        except Exception as e:
            print(e)

    while True:
        try:
            selling_price = float(input("Prezzo di vendita: "))
            if selling_price < 0:
                print("Prezzo di vendita inserito non valido. Inserisci un numero positivo.")
            else:
                break
        except ValueError:
            print("Valore inserito non valido!")
        except Exception as e:
            print(e)

    # The software will now print the sales recap.
    products[name] = {
        "quantity": quantity,
        "buying_price": buying_price,
        "selling_price": selling_price
    }

    print(f"AGGIUNTO: {quantity} X {name}")

# The dictionary in the JSON file is being filled
products = {}

def list_products(products):
    """
    Function to list products.
    """
    print("PRODOTTO   QUANTITA'   PREZZO")
    for name, details in products.items():
        quantity = details["quantity"]
        if quantity > 0:
            selling_price = details["selling_price"]
            print(f"{name}   {quantity}   €{selling_price}")

def register_sale(products, sales_data):
    """
    Function to register sales made.
    """
    total_price = 0
    continue_adding= True

    while continue_adding:
        name = input("Nome del prodotto: ").strip().lower()

        # The software checks if the product is in stock
        if name in products:
            while True:
                try:
                    quantity_wanted = int(input("Quantità: "))
                    quantity = products[name]["quantity"]

                    # It checks if there are enough products in stock.
                    assert quantity_wanted > 0, "La quantità deve essere maggiore di zero."
                    assert quantity_wanted <= quantity, "Non sono presenti sufficienti prodotti a magazzino! Inserisci una quantità inferiore."

                    break

                except ValueError:
                    print("Valore inserito non valido! Inserisci un numero intero.")
                except AssertionError as e:
                    print(e)
                except Exception as e:
                    print(e)

            # it updates the quantity in the inventory
            products[name]["quantity"] -= quantity_wanted

            #  it calculates the price and adds it to the sales details
            selling_price = products[name]["selling_price"]
            total_price += quantity_wanted * selling_price
            sales_data.append({
                "product_name": name,
                "quantity_wanted": quantity_wanted,
                "selling_price": selling_price,
                "buying_price": products[name]["buying_price"]
            })

            # the software asks if the user wants to add more products
            while True:
              more_to_buy = input("Aggiungere un altro prodotto? (si/no): ").strip().lower()
              if more_to_buy == "si":
                  break # It goes back to the cycle and asks for the next product name and quantity
              elif more_to_buy == "no":
                  continue_adding = False  # It exits the cycle and prints the sales summary
                  break
              else:
                print ("Comando inserito non valido. Riprova. ")


        else:
            # if the product does not exist in the inventory, it prints an error message
            print("Il prodotto selezionato non è presente a magazzino.")

    # Now the software prints the sales summary
    print("\nVENDITA REGISTRATA")
    for sale in sales_data:
        product_name = sale["product_name"]
        quantity_wanted = sale["quantity_wanted"]
        selling_price = sale["selling_price"]
        print(f"{quantity_wanted} X {product_name}: €{selling_price:.2f}")
    print(f"Totale: €{total_price:.2f}")

def calculate_profits(sales_data):
    """
    Function to calculate net and gross profits.
    """
    # both gross and net profit are initialized here
    gross_profit = 0
    net_profit = 0

    for sale in sales_data:
        selling_price = sale["selling_price"]
        buying_price = sale["buying_price"]
        quantity_wanted = sale["quantity_wanted"]

        # Gross profit is calculated
        gross_profit += selling_price * quantity_wanted
        # Net profit is calculated
        net_profit += (selling_price - buying_price) * quantity_wanted

    print(f"Profitto: lordo=€{gross_profit:.2f} netto=€{net_profit:.2f}")

def show_help():
    """
    Function to assist the user in using the program.
    """
    print("I comandi disponibili sono i seguenti:")
    print("aggiungi: aggiungi un prodotto al magazzino")
    print("elenca: elenca i prodotti in magazzino")
    print("vendita: registra una vendita")
    print("profitti: mostra i profitti totali")
    print("aiuto: mostra i possibili comandi")
    print("chiudi: esci dal programma")

def exit_program():
    """
    Function to exit the program.
    """
    print("Bye bye")

# Initialization of products and sales data
products = load_products()
sales_data = []

# main program cycle
while True:
    print("\n")
    command = input("Inserisci un comando: ").strip().lower()

    if command == "aggiungi":
        add_product(products)
        save_products(products)  # Saves updated products
        print("\n")
        print("\n")
    elif command == "elenca":
        list_products(products)
        print("\n")
        print("\n")
    elif command == "vendita":
        register_sale(products, sales_data)
        save_products(products)  # Saves products after each sale if quantities are updated

        print("\n")
        print("\n")
    elif command == "profitti":
        calculate_profits(sales_data)
        print("\n")
        print("\n")
    elif command == "aiuto":
        show_help()
        print("\n")
        print("\n")
    elif command == "chiudi":
        exit_program()
        print("\n")
        print("\n")
        break
    else:
        print("Comando non valido.")
        print("\n")
        show_help()